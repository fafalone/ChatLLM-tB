[Description("")]
[FormDesignerId("43EA2AB2-2132-4BCD-AB70-C8048C835928")]
[PredeclaredId]
Class Form1
    Private Enum PrintType
        PRINT_CHAT_CHUNK = 0
        ' below items share the same value with BaseStreamer::TextType
        PRINTLN_META = 1    ' print a whole line: general information
        PRINTLN_ERROR = 2    ' print a whole line: error message
        PRINTLN_REF = 3    ' print a whole line: reference
        PRINTLN_REWRITTEN_QUERY = 4    ' print a whole line: rewritten query
        PRINTLN_HISTORY_USER = 5    ' print a whole line: user input history
        PRINTLN_HISTORY_AI = 6    ' print a whole line: AI output history
        PRINTLN_TOOL_CALLING = 7    ' print a whole line: tool calling (supported by only a few models)
        PRINTLN_EMBEDDING = 8    ' print a whole line: embedding (example: "0.1 0.3 ...")
        PRINTLN_RANKING = 9    ' print a whole line: ranking (example: "0.8")
        PRINTLN_TOKEN_IDS = 10    ' print a whole line: token ids (example: "1 3 5 8 ...")

        PRINT_EVT_ASYNC_COMPLETED = 100   ' last async operation completed (utf8_str Is Null)
    End Enum
    
    ' typedef void (*f_chatllm_print)(void *user_data, int print_type, const char *utf8_str);
    Private Delegate Sub f_chatllm_print (ByVal user_data As LongPtr, ByVal print_type As PrintType, ByVal utf8_str As LongPtr)
    ' typedef void (*f_chatllm_end)(void *user_data);
    Private Delegate Sub f_chatllm_end (ByVal user_data As LongPtr)
    /**
    * @brief create ChatLLM object
    *
    * @return                  the object
    */
    Private Declare PtrSafe Function chatllm_create Lib "libchatllm" () As LongPtr
    /**
    * @brief append a command line option
    *
    * @param[in] obj               model object
    * @param[in] utf8_str          a command line option
    */
    Private Declare PtrSafe Sub chatllm_append_param Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr)
    /**
    * @brief start
    *
    * @param[in] obj               model object
    * @param[in] f_print           callback function for printing
    * @param[in] f_end             callback function when model generation ends
    * @param[in] user_data         user data provided to callback functions
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_start Lib "libchatllm" (ByVal obj As LongPtr, ByVal f_print As f_chatllm_print, ByVal f_end As f_chatllm_end, ByVal user_data As LongPtr) As Long
    /**
    * @brief set max number of generated tokens in a new round of conversation
    *
    * @param[in] obj               model object
    * @param[in] gen_max_tokens    -1 for as many as possible
    */
    Private Declare PtrSafe Sub chatllm_set_gen_max_tokens Lib "libchatllm" (ByVal obj As LongPtr, ByVal gen_max_tokens As Long)
    /**
    * @brief restart (i.e. discard history)
    *
    * * When a session has been loaded, the model is restarted to the point that the session is loaded;
    *
    *      Note: this would not work if `--extending` is not `none` or the model uses SWA.
    *
    * * Otherwise, it is restarted from the very beginning.
    *
    * @param[in] obj               model object
    * @param[in] utf8_sys_prompt   update to a new system prompt
    *                              if NULL, then system prompt is kept unchanged.
    */
    Private Declare PtrSafe Sub chatllm_restart Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_sys_prompt As LongPtr)
    /**
    * @brief user input
    *
    * This function is synchronized, i.e. it returns after model generation ends and `f_end` is called.
    *
    * @param[in] obj               model object
    * @param[in] utf8_str          user input
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_user_input Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief set prefix for AI generation
    *
    * This prefix is used in all following rounds..
    *
    * @param[in] obj               model object
    * @param[in] utf8_str          prefix
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_set_ai_prefix Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief add a suffix to ai output and continue generation
    *
    * @param[in] obj               model object
    * @param[in] utf8_str          suffix
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_ai_continue Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief tool input
    *
    * - If this function is called before `chatllm_user_input` returns, this is asynchronized,
    * - If this function is called after `chatllm_user_input` returns, this is equivalent to
    *   `chatllm_user_input`.
    *
    * @param[in] obj               model object
    * @param[in] utf8_str          user input
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_tool_input Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief feed in text generated by external tools
    *
    * This text is treated as part of AI's generation. After this is called, LLM generation
    * is continued.
    *
    * Example:
    *
    * ```c
    * // in `f_print` callback:
    * chatllm_abort_generation();
    * chatllm_tool_completion(...);
    * ```
    *
    * @param[in] obj               model object
    * @param[in] utf8_str          text
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_tool_completion Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief tokenize
    *
    * embedding is emit through `PRINTLN_TOKEN_IDS`.
    *
    * @param[in] obj               model object
    * @param[in] utf8_str          text
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_text_tokenize Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief text embedding
    *
    * embedding is emit through `PRINTLN_EMBEDDING`.
    *
    * @param[in] obj               model object
    * @param[in] utf8_str          text
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_text_embedding Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief question & answer ranking
    *
    * embedding is emit through `PRINTLN_RANKING`.
    *
    * @param[in] obj               model object
    * @param[in] utf8_str_q        question
    * @param[in] utf8_str_q        answer
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_qa_rank Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str_q As LongPtr, ByVal utf8_str_a As LongPtr) As Long

   /**
    * @brief switching RAG vector store
    *
    * @param[in] obj               model object
    * @param[in] name              vector store name
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_rag_select_store Lib "libchatllm" (ByVal obj As LongPtr, ByVal name As LongPtr) As Long

   /**
    * @brief abort generation
    *
    * This function is asynchronized, i.e. it returns immediately.
    *
    * @param[in] obj               model object
    */
    Private Declare PtrSafe Sub chatllm_abort_generation Lib "libchatllm" (ByVal obj As LongPtr)

   /**
    * @brief show timing statistics
    *
    * Result is sent to `f_print`.
    *
    * @param[in] obj               model object
    */
    Private Declare PtrSafe Sub chatllm_show_statistics Lib "libchatllm" (ByVal obj As LongPtr)

   /**
    * @brief save current session on demand
    *
    * Note: Call this from the same thread of `chatllm_user_input()`.
    *
    * If chat history is empty, then system prompt is evaluated and saved.
    *
    * @param[in] obj               model object
    * @param[in] utf8_str          file full name
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_save_session Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief load a session on demand
    *
    * Note: Call this from the same thread of `chatllm_user_input()`.
    *
    * @param[in] obj               model object
    * @param[in] utf8_str          file full name
    * @return                      0 if succeeded
    */
    Private Declare PtrSafe Function chatllm_load_session Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief get integer result of last async operation
    *
    * @param[in] obj               model object
    * @return                      last result (if async is still ongoing, INT_MIN)
    */
    Private Declare PtrSafe Function chatllm_get_async_result_int Lib "libchatllm" (ByVal obj As LongPtr) As Long

   /**
    * @brief async version of `chatllm_start`
    *
    * @param   ...
    * @return                      0 if started else -1
    */
    Private Declare PtrSafe Function chatllm_async_start Lib "libchatllm" (ByVal obj As LongPtr, ByVal f_print As f_chatllm_print, ByVal f_end As f_chatllm_end, ByVal user_data As LongPtr) As Long

   /**
    * @brief async version of `chatllm_user_input`

    * @param   ...
    * @return                      0 if started else -1
    */
    Private Declare PtrSafe Function chatllm_async_user_input Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief async version of `chatllm_tool_input`

    * @param   ...
    * @return                      0 if started else -1
    */
    Private Declare PtrSafe Function chatllm_async_tool_input Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief async version of `chatllm_tool_completion`

    * @param   ...
    * @return                      0 if started else -1
    */
    Private Declare PtrSafe Function chatllm_async_tool_completion Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief async version of `chatllm_text_embedding`

    * @param   ...
    * @return                      0 if started else -1
    */
    Private Declare PtrSafe Function chatllm_async_text_embedding Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str As LongPtr) As Long

   /**
    * @brief async version of `chatllm_qa_rank`

    * @param   ...
    * @return                      0 if started else -1
    */
    Private Declare PtrSafe Function chatllm_async_qa_rank Lib "libchatllm" (ByVal obj As LongPtr, ByVal utf8_str_q As LongPtr, ByVal utf8_str_a As LongPtr) As Long
       
    Private DeclareWide PtrSafe Function SendMessage Lib "user32" Alias "SendMessageW" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
    Private Const EM_SCROLL = &HB5
    Private Const SB_BOTTOM  = 7
    Private Declare PtrSafe Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As MBWC_Flags, ByVal lpMultiByteStr As LongPtr, ByVal cchMultiByte As Long, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As Long) As Long
    Private Enum MBWC_Flags
        MB_PRECOMPOSED = &H1
        MB_COMPOSITE = &H2
        MB_USEGLYPHCHARS = &H4
        MB_ERR_INVALID_CHARS = &H8
    End Enum
    Private Const CP_UTF8 = 65001
    
    Private mObj As LongPtr
    
    Private sPrompts() As String
    Private nPmt As Long
    Private nHist As Long
    
    Private Function ConvertFromUTF8(sSource As LongPtr) As String

        Dim cchBuff As Long
        Dim cchSrc As Long
        Dim Buffer As String
 
        cchSrc = MultiByteToWideChar(CP_UTF8, 0, sSource, -1&, 0, 0)
        cchBuff = MultiByteToWideChar(CP_UTF8, 0, sSource, cchSrc, 0, 0)
        
        Buffer = Space$(cchBuff)
        MultiByteToWideChar CP_UTF8, 0, sSource, cchSrc, StrPtr(Buffer), cchBuff
     
        ConvertFromUTF8 = Buffer
    
    End Function
    Private Sub f_chatllm_print(ByVal user_data As LongPtr, ByVal print_type As PrintType, ByVal utf8_str As LongPtr)
        Debug.Print "f_chatllm_print"
        Dim sz As String = ConvertFromUTF8(utf8_str)
        Select Case print_type
            Case PRINT_CHAT_CHUNK
                Text2.Text = Text2.Text & sz
            Case Else
                Text2.Text = Text2.Text & sz & vbCrLf
        End Select
        SendMessage Text2.hWnd, EM_SCROLL, SB_BOTTOM, ByVal 0&
    End Sub
    
    Private Sub f_chatllm_end(ByVal user_data As LongPtr)
        Text2.Text = Text2.Text & vbCrLf
    End Sub
    
    Private Sub Command3_Click() Handles Command3.Click
        mObj = chatllm_create()
        If mObj = 0 Then
            Debug.Print "Failed to create object."
            Exit Sub
        End If
        chatllm_append_param mObj, StrPtr(StrConv("-m", vbUTF8))
        chatllm_append_param mObj, StrPtr(StrConv(Text3.Text, vbUTF8))
        Dim r As Long = chatllm_start(mObj, AddressOf f_chatllm_print, AddressOf f_chatllm_end, 0)
        If r Then
            Text2.Text = "<Error starting ChatLLM, " & r & ">"
            Exit Sub
        End If
        Command1.Enabled = True
        Command2.Enabled = True
        Command6.Enabled = True
        Command7.Enabled = True
               
    End Sub
    
    Private Sub Command1_Click() Handles Command1.Click
        Dim sUtf8 As String = StrConv(Text1.Text, vbUTF8)
        Text2.Text = Text2.Text & vbCrLf & "User >> " & Text1.Text & vbCrLf & Text3.Text & " >> "
        chatllm_user_input(mObj, StrPtr(sUtf8))
        ReDim Preserve sPrompts(nPmt)
        sPrompts(nPmt) = Text1.Text
        nPmt += 1
        Text1.Text = ""
        nHist = nPmt
        Command4.Enabled = True
        Command5.Enabled = False
    End Sub
    
    Private Sub Command4_Click() Handles Command4.Click
        Text1.Text = sPrompts(nHist - 1)
        nHist -= 1
        If nHist = 0 Then
            Command4.Enabled = False
        End If
        Command5.Enabled = True
    End Sub
    
    Private Sub Command5_Click() Handles Command5.Click
        Text1.Text = sPrompts(nHist - 1)
        If nHist = nPmt Then
            Command5.Enabled = False
        End If
        Command4.Enabled = True
    End Sub
    
    Private Sub Command2_Click() Handles Command2.Click
        Text2.Text = ""
    End Sub
    
    Private Sub Command6_Click() Handles Command6.Click
        chatllm_restart mObj, 0
        Text2.Text = ""
    End Sub
    
    Private Sub Command7_Click() Handles Command7.Click
        Dim sUtf8 As String = StrConv(Text1.Text, vbUTF8)
        chatllm_text_tokenize(mObj, StrPtr(sUtf8))
    End Sub
 
    Private Sub Text1_KeyPress(KeyAscii As Integer) Handles Text1.KeyPress
        #If TWINBASIC_BUILD <= 622 Then
            If KeyAscii = vbKeyReturn Then
                Command1_Click
            End If
        #End If
    End Sub
    
    
    
    
    
    
    
    
    
End Class